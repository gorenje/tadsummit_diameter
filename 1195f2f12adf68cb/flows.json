[{"id":"1195f2f12adf68cb","type":"tab","label":"Diameter protocol - part 1 - import example code","disabled":false,"info":"## Diameter Protocol\n\nUsing the example from [OTP](https://github.com/erlang/otp/tree/master/lib/diameter/examples/code).\n\n[OTP Module](https://www.erlang.org/doc/apps/diameter/diameter.html).\n\n## Background\n\n* https://en.wikipedia.org/wiki/Diameter_(protocol) - for high level understanding of Protocol \n* https://www.erlang.org/doc/apps/diameter/diameter.html -  Diameter application in Erlang \n* https://github.com/erlang/otp/tree/master/lib/diameter/examples/code - examples with REAME for how to run examples, just copy locally modules and run one by one \n* https://www.rfc-editor.org/rfc/rfc6733.html - RFC for Diameter protocol \n* https://github.com/erlang/otp/tree/master/lib/diameter - source code of Diameter inside of Erlang/OTP \n","env":[{"name":"ERED_TIMEOUT","value":"10","type":"num"},{"name":"ERED_PENDING","value":"true","type":"bool"},{"name":"ERED_ONLY","value":"true","type":"bool"},{"name":"ERED_NOT_EUNIT","value":"true","type":"bool"}]},{"id":"09d5965b7ab6b3d0","type":"group","z":"1195f2f12adf68cb","name":"module code from example @ github","style":{"label":true},"nodes":["d900e403947a34b4","29d6b9ab3a55d26c","9d789e81465c3529","7a6a8fa4b2dcfbde"],"x":83.5,"y":172.22500610351562,"w":450,"h":141.97500610351562},{"id":"d900e403947a34b4","type":"erlmodule","z":"1195f2f12adf68cb","g":"09d5965b7ab6b3d0","name":"","module_name":"diameter_client","code":"%%\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2010-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n%%\n\n-module(diameter_client).\n\n%%\n%% An example Diameter client that can sends base protocol ACR\n%% requests to a connected peer.\n%%\n%% Simplest usage to connect to a server listening on TCP at\n%% 127.0.0.1:3868:\n%%\n%%   client:start().\n%%   client:connect(tcp).\n%%   client:call().\n%%\n\n-export([start/1,     %% start a service\n         start/2,     %%\n         connect/2,   %% add a connecting transport\n         call/2,      %% send a request\n         stop/1]).    %% stop a service\n\n%% Convenience functions using the default service name.\n-export([start/0,\n         connect/1,\n         stop/0,\n         call/0,\n         call/1]).\n\n-define(DEF_SVC_NAME, ?MODULE).\n-define(L, atom_to_list).\n-define(LOOPBACK, {127,0,0,1}).\n\n%% Service configuration.\n-define(SERVICE(Name), [{'Origin-Host', ?L(Name) ++ \".example.com\"},\n                        {'Origin-Realm', \"example.com\"},\n                        {'Vendor-Id', 0},\n                        {'Product-Name', \"Client\"},\n                        {'Auth-Application-Id', [0]},\n                        {decode_format, map},\n                        {restrict_connections, false},\n                        {strict_mbit, false},\n                        {string_decode, false},\n                        {application, [{alias, common},\n                                       {dictionary, diameter_gen_base_rfc6733},\n                                       {module, diameter_client_cb},\n                                       {answer_errors, callback},\n                                       {call_mutates_state, false}]}]).\n\n%% start/2\n\nstart(Name, Opts) ->\n    Defaults = [T || {K,_} = T <- ?SERVICE(Name),\n                     not lists:keymember(K, 1, Opts)],\n    diameter:start_service(Name, Opts ++ Defaults).\n\n%% start/1\n\nstart(Opts) ->\n    start(?DEF_SVC_NAME, Opts).\n\n%% start/0\n\nstart() ->\n    start(?DEF_SVC_NAME, []).\n\n%% connect/1\n\nconnect(Opts) ->\n    connect(?DEF_SVC_NAME, Opts).\n\n%% connect/2\n\nconnect(Name, Opts)\n  when is_list(Opts) ->\n    diameter:add_transport(Name, {connect, lists:flatmap(fun opts/1, Opts)});\n\n%% backwards compatibility with old config\nconnect(Name, {T, Opts}) ->\n    connect(Name, [T | Opts]);\nconnect(Name, T) ->\n    connect(Name, [T]).\n\n%% call/2\n\ncall(Name, #{'Session-Id' := _} = Avps) ->\n    Defaults = #{'Destination-Realm' => \"example.com\",\n                 'Accounting-Record-Type' => 1,  %% EVENT_RECORD\n                 'Accounting-Record-Number' => 0},\n    ACR = ['ACR' | maps:merge(Defaults, Avps)],\n    diameter:call(Name, common, ACR, []);\n\ncall(Name, #{} = Avps) ->\n    call(Name, Avps#{'Session-Id' => diameter:session_id(?L(Name))});\n\ncall(Name, Avps) ->\n    call(Name, maps:from_list(Avps)).\n\n%% call/1\n\ncall(Avps) ->\n    call(?DEF_SVC_NAME, Avps).\n\n%% call/0\n\ncall() ->\n    call(?DEF_SVC_NAME, #{}).\n\n%% stop/1\n\nstop(Name) ->\n    diameter:stop_service(Name).\n\nstop() ->\n    stop(?DEF_SVC_NAME).\n\n%% ===========================================================================\n\n%% opts/1\n%%\n%% Map some terms to transport_module/transport_config pairs as a\n%% convenience, pass everything else unmodified.\n\nopts(T)\n  when T == any;\n       T == tcp;\n       T == sctp ->\n   opts({T, loopback, 3868});\n\nopts({T, RA, RP}) ->\n    opts({T, [], RA, RP});\n\nopts({T, loopback, RA, RP}) ->\n    opts({T, ?LOOPBACK, RA, RP});\n\nopts({T, LA, RA, RP})\n  when is_tuple(LA) ->\n    opts({T, [{ip, LA}], RA, RP});\n\nopts({any, Opts, RA, RP}) ->\n    All = Opts ++ opts(RA, RP),\n    [{transport_module, diameter_sctp},\n     {transport_config, All, 2000},\n     {transport_module, diameter_tcp},\n     {transport_config, All}];\n\nopts({tcp, Opts, RA, RP}) ->\n    opts({diameter_tcp, Opts, RA, RP});\n\nopts({sctp, Opts, RA, RP}) ->\n    opts({diameter_sctp, Opts, RA, RP});\n\nopts({Mod, Opts, loopback, RP}) ->\n    opts({Mod, Opts, ?LOOPBACK, RP});\n\nopts({Mod, Opts, RA, default}) ->\n    opts({Mod, Opts, RA, 3868});\n\nopts({Mod, Opts, RA, RP}) ->\n    [{transport_module, Mod},\n     {transport_config, opts(RA, RP) ++ Opts}];\n\nopts(T) ->\n    [T].\n\n%% opts/2\n\nopts(loopback, RP) ->\n    opts(?LOOPBACK, RP);\n\nopts(RA, RP) ->\n    [{raddr, RA}, {rport, RP}, {reuseaddr, true}].","x":189.5,"y":213.22500610351562,"wires":[]},{"id":"29d6b9ab3a55d26c","type":"erlmodule","z":"1195f2f12adf68cb","g":"09d5965b7ab6b3d0","name":"","module_name":"diameter_client_cb","code":"%%\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2010-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n%%\n\n-module(diameter_client_cb).\n\n-include_lib(\"diameter/include/diameter.hrl\").\n\n%% diameter callbacks\n-export([peer_up/3,\n         peer_down/3,\n         pick_peer/4,\n         prepare_request/3,\n         prepare_retransmit/3,\n         handle_answer/4,\n         handle_error/4,\n         handle_request/3]).\n\n%% peer_up/3\n\npeer_up(_SvcName, _Peer, State) ->\n    State.\n\n%% peer_down/3\n\npeer_down(_SvcName, _Peer, State) ->\n    State.\n\n%% pick_peer/4\n\npick_peer([Peer | _], _, _SvcName, _State) ->\n    {ok, Peer}.\n\n%% prepare_request/3\n\nprepare_request(#diameter_packet{msg = [Name | Avps]}, _, {_, Caps}) ->\n    #diameter_caps{origin_host = {OH, _},\n                   origin_realm = {OR, _}}\n        = Caps,\n    {send, [Name | Avps#{'Origin-Host' => OH, 'Origin-Realm' => OR}]}.\n\n%% prepare_retransmit/3\n\nprepare_retransmit(Pkt, _SvcName, _Peer) ->\n    {send, Pkt}.\n\n%% handle_answer/4\n\nhandle_answer(#diameter_packet{msg = Msg}, _Request, _SvcName, _Peer) ->\n    {ok, Msg}.\n\n%% handle_error/4\n\nhandle_error(Reason, _Request, _SvcName, _Peer) ->\n    {error, Reason}.\n\n%% handle_request/3\n\nhandle_request(_Packet, _SvcName, _Peer) ->\n    {answer_message, 3001}.  %% DIAMETER_COMMAND_UNSUPPORTED\n","x":199.5,"y":273.20001220703125,"wires":[]},{"id":"9d789e81465c3529","type":"erlmodule","z":"1195f2f12adf68cb","g":"09d5965b7ab6b3d0","name":"","module_name":"diameter_server","code":"%%\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2010-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n%%\n\n-module(diameter_server).\n\n%%\n%% An example Diameter server that answers the base protocol ACR sent\n%% by the client example.\n%%\n%% Simplest usage to listen on TCP at 127.0.0.1:3868:\n%%\n%%   server:start().\n%%   server:listen(tcp).\n%%\n\n\n%% Interface.\n-export([start/1,    %% start a service\n         start/2,    %%\n         listen/2,   %% add a listening transport\n         stop/1]).   %% stop a service\n\n%% Convenience functions using the default service name.\n-export([start/0,\n         listen/1,\n         stop/0]).\n\n%% Internal callback.\n-export([message/3]).\n\n-define(DEF_SVC_NAME, ?MODULE).\n\n%% The service configuration. In a server supporting multiple Diameter\n%% applications each application may have its own, although they could all\n%% be configured with a common callback module.\n-define(SERVICE(Name), [{'Origin-Host', atom_to_list(Name) ++ \".example.com\"},\n                        {'Origin-Realm', \"example.com\"},\n                        {'Vendor-Id', 193},\n                        {'Product-Name', \"Server\"},\n                        {'Auth-Application-Id', [0]},\n                        {decode_format, map},\n                        {restrict_connections, false},\n                        {strict_mbit, false},\n                        {string_decode, false},\n                        {application, [{alias, common},\n                                       {dictionary, diameter_gen_base_rfc6733},\n                                       {module, diameter_server_cb},\n                                       {call_mutates_state, false}]}]).\n\n%% start/2\n\nstart(Name, Opts) ->\n    Defaults = [T || {K,_} = T <- ?SERVICE(Name),\n                     not lists:keymember(K, 1, Opts)],\n    diameter:start_service(Name, Opts ++ Defaults).\n\n%% start/1\n\nstart(Opts) ->\n    start(?DEF_SVC_NAME, Opts).\n\n%% start/0\n\nstart() ->\n    start(?DEF_SVC_NAME, []).\n\n%% listen/2\n\nlisten(Name, Opts)\n  when is_list(Opts) ->\n    diameter:add_transport(Name, {listen, lists:flatmap(fun opts/1, Opts)});\n\n%% backwards compatibility with old config\nlisten(Name, {T, Opts}) ->\n    listen(Name, [T | Opts]);\nlisten(Name, T) ->\n    listen(Name, [T]).\n\n%% listen/1\n\nlisten(Opts) ->\n    listen(?DEF_SVC_NAME, Opts).\n\n%% stop/1\n\nstop(Name) ->\n    diameter:stop_service(Name).\n\n%% stop/0\n\nstop() ->\n    stop(?DEF_SVC_NAME).\n\n%% ===========================================================================\n\n%% opts/1\n%%\n%% Map a 3-tuple a transport_module/transport_config pair as a\n%% convenience, pass everything else unmodified.\n\nopts(T)\n  when T == tcp;\n       T == sctp ->\n    opts({T, loopback, default});\n\nopts({tcp, Addr, Port}) ->\n    opts({diameter_tcp, Addr, Port});\n\nopts({sctp, Addr, Port}) ->\n    opts({diameter_sctp, Addr, Port});\n\nopts({Mod, loopback, Port}) ->\n    opts({Mod, {127,0,0,1}, Port});\n\nopts({Mod, Addr, default}) ->\n    opts({Mod, Addr, 3868});\n\nopts({Mod, Addr, Port}) ->\n    [{transport_module, Mod},\n     {transport_config, [{reuseaddr, true},\n                         {sender, true},\n                         {message_cb, {?MODULE, message, [0]}},\n                         {ip, Addr},\n                         {port, Port}]}];\nopts(T) ->\n    [T].\n\n%% message/3\n%%\n%% Simple message callback that limits the number of concurrent\n%% requests on the peer connection in question.\n\n%% Incoming request.\nmessage(recv, <<_:32, 1:1, _/bits>> = Bin, N) ->\n    [Bin, N < 32, {?MODULE, message, [N+1]}];\n\n%% Outgoing request.\nmessage(ack, <<_:32, 1:1, _/bits>>, _) ->\n    [];\n\n%% Incoming answer or request discarded.\nmessage(ack, _, N) ->\n    [N =< 32, {?MODULE, message, [N-1]}];\n\n%% Outgoing message or incoming answer.\nmessage(_, Bin, _) ->\n    [Bin].\n","x":407.5,"y":213.22500610351562,"wires":[]},{"id":"7a6a8fa4b2dcfbde","type":"erlmodule","z":"1195f2f12adf68cb","g":"09d5965b7ab6b3d0","name":"","module_name":"diameter_server_cb","code":"%%\n%% %CopyrightBegin%\n%%\n%% SPDX-License-Identifier: Apache-2.0\n%%\n%% Copyright Ericsson AB 2010-2025. All Rights Reserved.\n%%\n%% Licensed under the Apache License, Version 2.0 (the \"License\");\n%% you may not use this file except in compliance with the License.\n%% You may obtain a copy of the License at\n%%\n%%     http://www.apache.org/licenses/LICENSE-2.0\n%%\n%% Unless required by applicable law or agreed to in writing, software\n%% distributed under the License is distributed on an \"AS IS\" BASIS,\n%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n%% See the License for the specific language governing permissions and\n%% limitations under the License.\n%%\n%% %CopyrightEnd%\n%%\n\n%%\n%% The diameter application callback module configured by server.erl.\n%%\n\n-module(diameter_server_cb).\n\n-include_lib(\"diameter/include/diameter.hrl\").\n\n%% diameter callbacks\n-export([peer_up/3,\n         peer_down/3,\n         pick_peer/4,\n         prepare_request/3,\n         prepare_retransmit/3,\n         handle_answer/4,\n         handle_error/4,\n         handle_request/3]).\n\n%% Raise an error on callbacks that aren't expected.\n-define(ERROR, error({unexpected, ?MODULE, ?LINE})).\n\n%% peer_up/3\n\npeer_up(_SvcName, _Peer, State) ->\n    State.\n\n%% peer_down/3\n\npeer_down(_SvcName, _Peer, State) ->\n    State.\n\n%% pick_peer/3\n\n%% Don't let requests be sent, so other request callbacks shouldn't\n%% happen.\npick_peer(_LocalCandidates, _RemoteCandidates, _SvcName, _State) ->\n    false.\n\n%% prepare_request/3\n\nprepare_request(_Packet, _SvcName, _Peer) ->\n    ?ERROR.\n\n%% prepare_retransmit/3\n\nprepare_retransmit(_Packet, _SvcName, _Peer) ->\n    ?ERROR.\n\n%% handle_answer/4\n\nhandle_answer(_Packet, _Request, _SvcName, _Peer) ->\n    ?ERROR.\n\n%% handle_error/4\n\nhandle_error(_Reason, _Request, _SvcName, _Peer) ->\n    ?ERROR.\n\n%% handle_request/3\n\n%% ACR without decode errors.\nhandle_request(#diameter_packet{msg = ['ACR' | #{} = Request],\n                                errors = []},\n               _SvcName,\n               {_, Caps}) ->\n    #diameter_caps{origin_host = {OH,_},\n                   origin_realm = {OR,_}}\n        = Caps,\n\n    #{'Session-Id' := Sid,\n      'Accounting-Record-Type' := T,\n      'Accounting-Record-Number' := N}\n        = Request,\n\n    Answer = #{'Result-Code' => 2001,  %% DIAMETER_SUCCESS\n               'Origin-Host' => OH,\n               'Origin-Realm' => OR,\n               'Session-Id' => Sid,\n               'Accounting-Record-Type' => T,\n               'Accounting-Record-Number' => N},\n\n    {reply, ['ACA' | Answer]};\n\n%% ACR with decode errors.\nhandle_request(#diameter_packet{msg = ['ACR' | #{} = Request]},\n               _SvcName,\n               {_, Caps}) ->\n    #diameter_caps{origin_host = {OH,_},\n                   origin_realm = {OR,_}}\n        = Caps,\n\n    Answer = maps:merge(maps:with(['Session-Id'], Request),\n                        #{'Origin-Host' => OH,\n                          'Origin-Realm' => OR}),\n\n    %% Let diameter set Result-Code and Failed-AVP if there were\n    %% decode errors.\n    {reply, ['answer-message' | Answer]};\n\n%% Answer anything else as unsupported.\nhandle_request(#diameter_packet{}, _SvcName, _) ->\n    {answer_message, 3001}.  %% DIAMETER_COMMAND_UNSUPPORTED","x":417.5,"y":273.20001220703125,"wires":[]},{"id":"46ca5c5cfbbafaee","type":"function","z":"1195f2f12adf68cb","name":"start diameter server","func":"#{ <<\"payload\">> := Payload } = Msg,\n\nD = case diameter:start() of \n    ok ->\n        Msg#{ <<\"payload\">> => ok };\n    {error, {already_started, _}} ->\n        Msg#{ <<\"payload\">> => ok };\n    {error, Reason} ->\n        Msg#{ <<\"payload\">> => error, <<\"error\">> => #{ <<\"reason\">> => Reason } };\n    {error, {Reason, ErrMsg}} ->\n        Msg#{ <<\"payload\">> => error, <<\"error\">> => #{ <<\"reason\">> => Reason, <<\"msg\">> => ErrMsg} }\nend,\n\nio:format(\"~p\",[D]),\n\nD\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420.999755859375,"y":494.5,"wires":[["79b61ddd3f7a7f60"]]},{"id":"10352273ce81b65b","type":"inject","z":"1195f2f12adf68cb","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":167.999755859375,"y":494.5,"wires":[["46ca5c5cfbbafaee"]]},{"id":"79b61ddd3f7a7f60","type":"switch","z":"1195f2f12adf68cb","name":"did start?","property":"payload","propertyType":"msg","rules":[{"t":"eq","v":"ok","vt":"jsonata"},{"t":"eq","v":"error","vt":"jsonata"},{"t":"else"}],"checkall":"false","repair":false,"outputs":3,"x":651.999755859375,"y":494.5,"wires":[["3de769455d2ab0a5"],["a6e13b6ee7ca3068","5728b4ce141b99dc"],["a6e13b6ee7ca3068","5728b4ce141b99dc"]]},{"id":"a6e13b6ee7ca3068","type":"debug","z":"1195f2f12adf68cb","name":"Error starting diameter application","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":931.999755859375,"y":806,"wires":[]},{"id":"3de769455d2ab0a5","type":"function","z":"1195f2f12adf68cb","name":"start server listener","func":"#{ <<\"payload\">> := Payload } = Msg,\n\ndiameter_server:start(),\n\nD = Msg#{ <<\"payload\">> => diameter_server:listen(tcp) },\n\n%% io:format(\"~p\",[D]),\n\nD\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":931.999755859375,"y":482.5,"wires":[["73377744ecd8a92d"]]},{"id":"73377744ecd8a92d","type":"switch","z":"1195f2f12adf68cb","name":"did start?","property":"payload[0]","propertyType":"msg","rules":[{"t":"eq","v":"ok","vt":"jsonata"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":1151.999755859375,"y":482.5,"wires":[["0bf5093abf109416"],["4481b395a2202478","b722d41cb6bac4bc"]]},{"id":"4481b395a2202478","type":"debug","z":"1195f2f12adf68cb","name":"Error starting diameter application","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1420.999755859375,"y":806,"wires":[]},{"id":"5728b4ce141b99dc","type":"ut-assert-failure","z":"1195f2f12adf68cb","name":"","x":931.999755859375,"y":686,"wires":[]},{"id":"b722d41cb6bac4bc","type":"ut-assert-failure","z":"1195f2f12adf68cb","name":"","x":1420.999755859375,"y":686,"wires":[]},{"id":"0bf5093abf109416","type":"function","z":"1195f2f12adf68cb","name":"connect up client","func":"#{ <<\"payload\">> := Payload } = Msg,\n\ndiameter_client:start(),\n\nD = Msg#{ <<\"payload\">> => diameter_client:connect(tcp) },\n\n%% io:format(\"~p\",[D]),\n\nD\n\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1420.999755859375,"y":477.5,"wires":[["326680172549efcc"]]},{"id":"326680172549efcc","type":"switch","z":"1195f2f12adf68cb","name":"did start?","property":"payload[0]","propertyType":"msg","rules":[{"t":"eq","v":"ok","vt":"jsonata"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":1692.499755859375,"y":477.5,"wires":[["2c87147e5c9e2e04"],["4eade6f4b4881ae4","07bd10c25e36ac5b"]]},{"id":"07bd10c25e36ac5b","type":"debug","z":"1195f2f12adf68cb","name":"Error starting diameter application","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2003.499755859375,"y":806,"wires":[]},{"id":"4eade6f4b4881ae4","type":"ut-assert-failure","z":"1195f2f12adf68cb","name":"","x":2003.499755859375,"y":686,"wires":[]},{"id":"8ed803bdab8026af","type":"function","z":"1195f2f12adf68cb","name":"do a test call to the server","func":"#{ <<\"payload\">> := Payload } = Msg,\n\nD = Msg#{ <<\"payload\">> => diameter_client:call() },\n\n%% io:format(\"~p\",[D]),\n\nD\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2307.999755859375,"y":374.25,"wires":[["10816c65ddd09cdd"]]},{"id":"10816c65ddd09cdd","type":"switch","z":"1195f2f12adf68cb","name":"succeed?","property":"payload[0]","propertyType":"msg","rules":[{"t":"eq","v":"ok","vt":"jsonata"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":2624.999755859375,"y":374.25,"wires":[["222844a1efca475f","ac74e74dfc8fd07f"],["e62891ded92b07e4"]]},{"id":"1f4cccb088753589","type":"delay","z":"1195f2f12adf68cb","name":"retry after 1 second","pauseType":"delay","timeout":"1","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":2287.999755859375,"y":506,"wires":[["8ed803bdab8026af"]]},{"id":"222844a1efca475f","type":"ut-assert-success","z":"1195f2f12adf68cb","name":"","count":1,"x":2848.999755859375,"y":368.25,"wires":[]},{"id":"e62891ded92b07e4","type":"change","z":"1195f2f12adf68cb","name":"inc retry counter","rules":[{"p":"retrycount","pt":"msg","t":"set","to":"$$.retrycount + 1","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":2604.999755859375,"y":506,"wires":[["7bb25570789b7195"]]},{"id":"2c87147e5c9e2e04","type":"change","z":"1195f2f12adf68cb","name":"set retry counter","rules":[{"p":"retrycount","pt":"msg","t":"set","to":"0","tot":"num"}],"action":"","property":"","from":"","to":"","reg":false,"x":2003.499755859375,"y":374.25,"wires":[["8ed803bdab8026af"]]},{"id":"7bb25570789b7195","type":"switch","z":"1195f2f12adf68cb","name":"max. 5 retries","property":"retrycount","propertyType":"msg","rules":[{"t":"lt","v":"5","vt":"num"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":2457.999755859375,"y":678,"wires":[["1f4cccb088753589"],["2a1cf206b88ef29d","cd989f897756d475"]]},{"id":"cd989f897756d475","type":"ut-assert-failure","z":"1195f2f12adf68cb","name":"","x":2848.999755859375,"y":686,"wires":[]},{"id":"2a1cf206b88ef29d","type":"debug","z":"1195f2f12adf68cb","name":"debug 4","active":true,"tosidebar":true,"console":false,"tostatus":true,"complete":"true","targetType":"full","statusVal":"","statusType":"counter","x":2838.999755859375,"y":806,"wires":[]},{"id":"ac74e74dfc8fd07f","type":"debug","z":"1195f2f12adf68cb","name":"successful call","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":2858.999755859375,"y":309,"wires":[]},{"id":"ab3cac142a07438b","type":"function","z":"1195f2f12adf68cb","name":"call example","func":"#{ <<\"payload\">> := Payload } = Msg,\n\ndiameter:start(),\ndiameter_server:start(),\ndiameter_server:listen(tcp),\ndiameter_client:start(),\ndiameter_client:connect(tcp),\n\nMsg#{ <<\"payload\">> => diameter_client:call() }\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":985,"y":212,"wires":[["e157cb4ba65bb71b"]]},{"id":"78fe87c2241127f9","type":"inject","z":"1195f2f12adf68cb","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":793,"y":212,"wires":[["ab3cac142a07438b"]]},{"id":"e157cb4ba65bb71b","type":"debug","z":"1195f2f12adf68cb","name":"debug 1","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1220,"y":212,"wires":[]},{"id":"64c11b2e6a1b7a3b","type":"function","z":"1195f2f12adf68cb","name":"do a test call to the server","func":"#{ <<\"payload\">> := Payload } = Msg,\n\nD = Msg#{ <<\"payload\">> => diameter_client:call(['AAP']) },\n\n%% io:format(\"~p\",[D]),\n\nD\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2349,"y":202,"wires":[["b18e69e6d117791a"]]},{"id":"5812b51188466677","type":"inject","z":"1195f2f12adf68cb","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":2032,"y":161,"wires":[["64c11b2e6a1b7a3b"]]},{"id":"b18e69e6d117791a","type":"debug","z":"1195f2f12adf68cb","name":"debug 3","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":2603,"y":170,"wires":[]}]